<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[iOSBuilding Blog]]></title>
  <link href="http://iOSBuilding.github.com/atom.xml" rel="self"/>
  <link href="http://iOSBuilding.github.com/"/>
  <updated>2013-04-27T20:06:45+08:00</updated>
  <id>http://iOSBuilding.github.com/</id>
  <author>
    <name><![CDATA[iOSBuilding]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在OC中两个对象的交互]]></title>
    <link href="http://iOSBuilding.github.com/blog/2013/03/21/zai-oczhong-liang-ge-dui-xiang-de-jiao-hu/"/>
    <updated>2013-03-21T08:51:00+08:00</updated>
    <id>http://iOSBuilding.github.com/blog/2013/03/21/zai-oczhong-liang-ge-dui-xiang-de-jiao-hu</id>
    <content type="html"><![CDATA[<p>当两个对象A对象B，比如两个ViewController他们需要传递数据，你能想到那些方法呢？</p>

<h3>NSNotificationCenter</h3>

<p>一对多的传递方式。对象A发出一个消息到消息中心，消息中心随后分发消息给监听该消息的对象，对象与对象之间不需要彼此知道，有点太loose啦。</p>

<h3>KVO (Key-Value Observing)</h3>

<p>对象A监听对象B的属性，当对象B被监听的属性改变，通知对象A执行想要执行的方法。</p>

<h3>Direct pointers</h3>

<p>对象A有一个指针指向对象B，从而直接使用该指针操作对象B。</p>

<h3>Delegate</h3>

<p>对象A是对象B的代理。在这种情况下对象A不知道任何关于对象B的事，他只知道对象作为他的代理可以传递消息。</p>

<h3>Blocks</h3>

<p>Blocks和代理有些类似。对象B给对象A一个或多个blocks只有当特定消息的发生的时候才执行。可以看AFNetworking里面大量使用block。</p>

<p>此文大部分翻译自<a href="https://github.com/hollance">@hollance</a>的<a href="http://www.hollance.com/2012/07/communicate-between-objects-using-channels/">Communicate between objects using channels</a>
主要是为自己总结，不足之处，敬请谅解。</p>

<p>另奉上一大神关于NSNotificationCenter的Blog<a href="http://www.mikeash.com/pyblog/friday-qa-2011-07-08-lets-build-nsnotificationcenter.html">Let&#8217;s Build NSNotificationCenter</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AFNetworking的总结]]></title>
    <link href="http://iOSBuilding.github.com/blog/2013/03/20/afnetworkingde-zong-jie/"/>
    <updated>2013-03-20T16:02:00+08:00</updated>
    <id>http://iOSBuilding.github.com/blog/2013/03/20/afnetworkingde-zong-jie</id>
    <content type="html"><![CDATA[<p>一直想写一篇关于AFNetworking学习总结的文章便于自己记忆，迟迟没有动手，今天终于开始动笔啦。自从ASIH的作者停止更新之后，我们不免有点小失望，直到AFNetworking的出现让我们重新燃起激情。AFnetworking稳定的更新维护及其良好的可扩展性，不得不佩服<a href="https://github.com/mattt">@matt</a>确实是个geek.<br/>
<strong>AFnetwokring的OverView</strong>
<img src="https://github.com/AFNetworking/AFNetworking/raw/gh-pages/afnetworking-architecture-diagram.png" alt="" /></p>

<p>AFnetworking的构成</p>

<ul>
<li><code>AFURLConnectionOperation</code> NSOperation的子类主要实现NSURLConnection协议的方法</li>
<li><code>AFHTTPRequsetOperation</code> AFURLConnectionOpration的子类封装一些http相关的协议</li>
<li><code>AFJSONRequsetOperation</code> AFHTTPRequsetOperation的子类，用于JSON的解析（默认使用的是系统自带JSON解析NSJSONSerialization）</li>
<li><code>AFXMLRequsetOperation</code>  AFHTTPRequsetOperation的子类，用于XML的解析</li>
<li><code>AFPropertyListRequestOperation</code> AFHTTPRequsetOperation的子类，用于Plist文件的解析</li>
<li><code>AFImageRequestOperation</code> AFHTTPRequsetOperation的子类，用于图片的下载</li>
<li><code>UIImageView+AFnetworking</code> UIImageView的扩展，异步加载图片</li>
<li><code>AFHTTPClient</code> NSObeject的子类，实现基于base URL的网络请求</li>
</ul>


<p><strong>注意以上所有的网络请求都是异步</strong></p>

<h2>AFNetworking类的使用</h2>

<h3>AFHTTPRequsetOperation的使用</h3>

<pre><code>AFHTTPRequsetOperation *requsetOpeation = [[AFHTTPRequsetOperation  alloc]initWithRequest:urlRequest];
[requsetOperation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation    *operation, id responseObject) {
    self.data = responseObject;
} failure:^(AFHTTPRequestOperation *operation, NSError *error){
     NSLog(@"%@", [error localizedDescription]);
}];
[requsetOpeation start];
</code></pre>

<h3>AFJSONRequsetOtion的使用</h3>

<pre><code>AFJSONRequestOperation *requsetOpeation = [AFJSONRequestOperation   JSONRequestOperationWithRequest:urlResquest 
success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) { 
     if ([JSON isKindOfClass:[NSData class]]) {
          self.data = JSON;
     } else if([JSON isKindOfClass:[NSDictionary class]]){
          self.dictionary = JSON;
     } 
} failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError     *error, id JSON) { 
   NSLog(@"%@", [error localizedDescription]); 
}];
[requsetOpeation start];
</code></pre>

<h3>AFXMLRequsetOperation的使用</h3>

<pre><code>AFXMLRequestOperation *requsetOpeation = [AFXMLRequestOperation     XMLParserRequestOperationWithRequest:urlResquest 
success:^(NSURLRequest *request, NSHTTPURLResponse *response, NSXMLParser   *XMLParser) {
    XMLParser.delegate = self;
    [XMLParser parse];
} failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError     *error, NSXMLParser *XMLParser) {
     NSLog(@"%@", [error localizedDescription]);
}];
[requsetOpeation start];
</code></pre>

<h3>AFPropertyListRequestOperation的使用</h3>

<pre><code>AFPropertyListRequestOperation *requsetOpeation = [AFPropertyListRequestOperation propertyListRequestOperationWithRequest:urlResquest 
success:^(NSURLRequest *request, NSHTTPURLResponse *response, id propertyList) {   
    self.dictionary = propertyList;
} failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id propertyList) {
    NSLog(@"%@", [error localizedDescription]); 
}];
[requsetOpeation start];
</code></pre>

<h3>AFImageRequestOperation的使用</h3>

<h3>UIImageView+AFnetworking的使用</h3>

<h3>AFHTTPClien的使用</h3>

<h2><strong><em>AFnetworking extension</em></strong></h2>

<p>待续。。。。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于ios常用的几个开发工具]]></title>
    <link href="http://iOSBuilding.github.com/blog/2013/03/20/guan-yu-ioschang-yong-de-ji-ge-kai-fa-gong-ju/"/>
    <updated>2013-03-20T14:00:00+08:00</updated>
    <id>http://iOSBuilding.github.com/blog/2013/03/20/guan-yu-ioschang-yong-de-ji-ge-kai-fa-gong-ju</id>
    <content type="html"><![CDATA[<p>今天是我们群建立博客的第一天，下面分享几个iOS开发使用的几个工具:</p>

<h2>KSImageNamed-Xcode</h2>

<p>当我们在XCode开发中使用[UImage imageNamed:]输入图片的名字很烦，而这个工具可以方便的帮我们自动完成图片文字的输入，我们只需要上下键选择所需要的名字即可</p>

<p><img src="http://iOSBuilding.github.com/images/blog1-kimage-screenshot.png"></p>

<p><a href="https://github.com/ksuther/KSImageNamed-Xcode">下载地址</a></p>

<p><em>安装方法</em>打开下载的工程运行一下就自动安装啦</p>

<h2>查看Sqite中存入数据工具</h2>

<p>当我们要查看sqilte里的数据的时候怎么办，总不能每次都手动代码查看把，下面介绍几个工具</p>

<ul>
<li>SQLite Database Browser <a href="http://sourceforge.net/projects/sqlitebrowser/">下载地址</a></li>
<li>还有火狐下的一款插件工具SQLite Manager</li>
</ul>


<h2>BBUncrustifyPlugin-Xcode(代码美化工具)</h2>

<p>这是一个代码美化工具的Xcode的插件，当我们代码写成如下形式时
<img src="http://iOSBuilding.github.com/images/code1.png"></p>

<p>只要运行下这个插件(点击Edit=>Uncrustify选项)就美化成如下形式
<img src="http://iOSBuilding.github.com/images/code2.png"></p>

<p><a href="https://github.com/benoitsan/BBUncrustifyPlugin-Xcode">下载地址</a></p>

<p><em>安装方法</em>打开下载的工程运行一下就自动安装啦</p>

<h2>Xcode中完美的插件管理工具</h2>

<p>在也不要去愁去寻找Xcode的插件了！！！</p>

<p><a href="https://github.com/mneorr/alcatraz-packages">下载地址</a></p>

<h2>SimPholders</h2>

<p>快速方便查找Xocde的项目在Finder位置，不要在杯具的望着一堆hash一直一个一个寻找自己刚编译完的项目了</p>

<p><a href="http://simpholders.com/">下载地址</a></p>

<h2>后续更新中 哈哈</h2>
]]></content>
  </entry>
  
</feed>
