<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[iOSBuilding Blog]]></title>
  <link href="http://iOSBuilding.github.com/atom.xml" rel="self"/>
  <link href="http://iOSBuilding.github.com/"/>
  <updated>2013-03-20T16:59:55+08:00</updated>
  <id>http://iOSBuilding.github.com/</id>
  <author>
    <name><![CDATA[iOSBuilding]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AFNetworking的总结]]></title>
    <link href="http://iOSBuilding.github.com/blog/2013/03/20/afnetworkingde-zong-jie/"/>
    <updated>2013-03-20T16:02:00+08:00</updated>
    <id>http://iOSBuilding.github.com/blog/2013/03/20/afnetworkingde-zong-jie</id>
    <content type="html"><![CDATA[<p>一直想写一篇关于AFNetworking学习总结的文章便于自己记忆，迟迟没有动手，今天终于开始动笔啦。自从ASIH的作者停止更新之后，我们不免有点小失望，直到AFNetworking的出现让我们重新燃起激情。AFnetworking稳定的更新维护及其良好的可扩展性，不得不佩服<a href="https://github.com/mattt">@matt</a>确实是个geek.<br/>
<strong>AFnetwokring的OverView</strong>
<img src="https://github.com/AFNetworking/AFNetworking/raw/gh-pages/afnetworking-architecture-diagram.png" alt="" /></p>

<p>AFnetworking的构成</p>

<ul>
<li><code>AFURLConnectionOperation</code> NSOperation的子类主要实现NSURLConnection协议的方法</li>
<li><code>AFHTTPRequsetOperation</code> AFURLConnectionOpration的子类封装一些http相关的协议</li>
<li><code>AFJSONRequsetOperation</code> AFHTTPRequsetOperation的子类，用于JSON的解析（默认使用的是系统自带JSON解析NSJSONSerialization）</li>
<li><code>AFXMLRequsetOperation</code>  AFHTTPRequsetOperation的子类，用于XML的解析</li>
<li><code>AFPropertyListRequestOperation</code> AFHTTPRequsetOperation的子类，用于Plist文件的解析</li>
<li><code>AFImageRequestOperation</code> AFHTTPRequsetOperation的子类，用于图片的下载</li>
<li><code>UIImageView+AFnetworking</code> UIImageView的扩展，异步加载图片</li>
<li><code>AFHTTPClient</code> NSObeject的子类，实现基于base URL的网络请求</li>
</ul>


<p><strong>注意以上所有的网络请求都是异步</strong></p>

<h2>AFNetworking类的使用</h2>

<h3>AFHTTPRequsetOperation的使用</h3>

<pre><code>AFHTTPRequsetOperation *requsetOpeation = [[AFHTTPRequsetOperation  alloc]initWithRequest:urlRequest];
[requsetOperation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation    *operation, id responseObject) {
    self.data = responseObject;
} failure:^(AFHTTPRequestOperation *operation, NSError *error){
     NSLog(@"%@", [error localizedDescription]);
}];
[requsetOpeation start];
</code></pre>

<h3>AFJSONRequsetOtion的使用</h3>

<pre><code>AFJSONRequestOperation *requsetOpeation = [AFJSONRequestOperation   JSONRequestOperationWithRequest:urlResquest 
success:^(NSURLRequest *request, NSHTTPURLResponse *response, id JSON) { 
     if ([JSON isKindOfClass:[NSData class]]) {
          self.data = JSON;
     } else if([JSON isKindOfClass:[NSDictionary class]]){
          self.dictionary = JSON;
     } 
} failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError     *error, id JSON) { 
   NSLog(@"%@", [error localizedDescription]); 
}];
[requsetOpeation start];
</code></pre>

<h3>AFXMLRequsetOperation的使用</h3>

<pre><code>AFXMLRequestOperation *requsetOpeation = [AFXMLRequestOperation     XMLParserRequestOperationWithRequest:urlResquest 
success:^(NSURLRequest *request, NSHTTPURLResponse *response, NSXMLParser   *XMLParser) {
    XMLParser.delegate = self;
    [XMLParser parse];
} failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError     *error, NSXMLParser *XMLParser) {
     NSLog(@"%@", [error localizedDescription]);
}];
[requsetOpeation start];
</code></pre>

<h3>AFPropertyListRequestOperation的使用</h3>

<pre><code>AFPropertyListRequestOperation *requsetOpeation = [AFPropertyListRequestOperation propertyListRequestOperationWithRequest:urlResquest 
success:^(NSURLRequest *request, NSHTTPURLResponse *response, id propertyList) {   
    self.dictionary = propertyList;
} failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id propertyList) {
    NSLog(@"%@", [error localizedDescription]); 
}];
[requsetOpeation start];
</code></pre>

<h3>AFImageRequestOperation的使用</h3>

<h3>UIImageView+AFnetworking的使用</h3>

<h3>AFHTTPClien的使用</h3>

<h2><strong><em>AFnetworking extension</em></strong></h2>

<p>待续。。。。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于ios常用的几个开发工具]]></title>
    <link href="http://iOSBuilding.github.com/blog/2013/03/20/guan-yu-ioschang-yong-de-ji-ge-kai-fa-gong-ju/"/>
    <updated>2013-03-20T14:00:00+08:00</updated>
    <id>http://iOSBuilding.github.com/blog/2013/03/20/guan-yu-ioschang-yong-de-ji-ge-kai-fa-gong-ju</id>
    <content type="html"><![CDATA[<p>今天是我们群建立博客的第一天，下面分享几个iOS开发使用的几个工具:</p>

<h2>KSImageNamed-Xcode</h2>

<p>当我们在XCode开发中使用[UImage imageNamed:]输入图片的名字很烦，而这个工具可以方便的帮我们自动完成图片文字的输入，我们只需要上下键选择所需要的名字即可</p>

<p><img src="http://iOSBuilding.github.com/images/blog1-kimage-screenshot.png"></p>

<p><a href="https://github.com/ksuther/KSImageNamed-Xcode">下载地址</a></p>

<p><em>安装方法</em>打开下载的工程运行一下就自动安装啦</p>

<h2>后续更新中 哈哈</h2>
]]></content>
  </entry>
  
</feed>
